{
  "name": "Log file and Heroku Log",
  "scopeName": "source.heroku-logs",
  "repository": {
    "app-name": {
      "match": "\\b[a-zA-Z0-9-]+\\b(?=\\[)",
      "name": "keyword.control app-name.heroku-logs"
    },
    "process-type": {
      "match": "(?<=\\[)[a-zA-Z0-9-\\.]+(?=\\]:)",
      "name": "keyword process-type.heroku-logs"
    },
    "attachments-attach": {
      "match": "(Attach )([A-Z_\\s]+)(?:\\(@ref:)([a-zA-Z0-9-]+)",
      "captures": {
        "1": {
          "name": "comment"
        },
        "2": {
          "name": "keyword"
        },
        "3": {
          "name": "keyword"
        }
      }
    },
    "attachments-update": {
      "match": "(Update )([A-Z_\\s]+)",
      "captures": {
        "1": {
          "name": "comment"
        },
        "2": {
          "name": "keyword"
        },
        "3": {
          "name": "keyword"
        }
      }
    },
    "attachments-detach": {
      "match": "(Detach )([A-Z_\\s]+)(?:\\(@ref:)([a-zA-Z0-9\\-]+)",
      "captures": {
        "1": {
          "name": "invalid"
        },
        "2": {
          "name": "keyword"
        },
        "3": {
          "name": "keyword"
        }
      }
    },
    "provisioning-complete": {
      "match": "(?:@ref:)([a-zA-Z0-9\\-]+)(?: completed provisioning)",
      "captures": {
        "1": {
          "name": "keyword"
        }
      }
    },
    "scaled-to": {
      "match": "(?:Scaled to )([a-zA-Z]+)(@)([0-9])(?:\\:)([a-zA-Z0-9-_]+)",
      "captures": {
        "1": {
          "name": "keyword"
        },
        "2": {
          "name": "keyword"
        },
        "3": {
          "name": "keyword"
        },
        "4": {
          "name": "keyword"
        }
      }
    },
    "state-changed": {
      "match": "\\b(State changed from )(\\w+)(?: to )(\\w+)\\b",
      "captures": {
        "2": {
          "patterns": [
            {
              "include": "#state-up-or-complete"
            },
            {
              "include": "#state-down"
            },
            {
              "include": "#state-starting"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "include": "#state-up-or-complete"
            },
            {
              "include": "#state-down"
            },
            {
              "include": "#state-starting"
            }
          ]
        }
      }
    },
    "state-up-or-complete": {
      "match": "(up|complete)",
      "name": "comment strong"
    },
    "state-down": {
      "match": "(down)",
      "name": "invalid strong"
    },
    "state-starting": {
      "match": "(starting)",
      "name": "keyword.control.anchor.regexp strong"
    },
    "exit-status": {
      "match": "(0)",
      "name": "comment strong"
    }
  },
  "patterns": [
    {
      "include": "#app-name"
    },
    {
      "include": "#process-type"
    },
    {
      "include": "#scaled-to"
    },
    {
      "include": "#state-changed"
    },
    {
      "include": "#attachments-attach"
    },
    {
      "include": "#attachments-detach"
    },
    {
      "include": "#provisioning-complete"
    },
    {
      "include": "#attachments-update"
    },
    {
      "match": "(\\w+#)",
      "captures": {
        "1": {
          "name": "constant.character.escape"
        }
      }
    },
    {
      "match": "\\b(path)=([^\\s]+)",
      "captures": {
        "1": {
          "name": "support.type.property-name"
        },
        "2": {
          "name": "comment"
        }
      }
    },
    {
      "match": "\\b(method)=([^\\s]+)",
      "captures": {
        "1": {
          "name": "support.type.property-name"
        },
        "2": {
          "name": "keyword.control"
        }
      }
    },
    {
      "match": "\\b(status)=([^\\s]+)",
      "captures": {
        "1": {
          "name": "support.type.property-name"
        },
        "2": {
          "patterns": [
            {
              "match": "\\b(2[0-9]{2})",
              "name": "comment"
            },
            {
              "match": "\\b(3[0-9]{2})",
              "name": "meta.type.cast.expr"
            },
            {
              "match": "\\b(4[0-9]{2})",
              "name": "constant.character.escape"
            },
            {
              "match": "\\b(5[0-9]{2})",
              "name": "invalid"
            }
          ]
        }
      }
    },
    {
      "match": "\\b(connect|service)=([^\\D]+)(ms)",
      "captures": {
        "1": {
          "name": "support.type.property-name"
        },
        "2": {
          "patterns": [
            {
              "match": "\\b(5[0-9]{3}|[6-9][0-9]{3}|\\d{5,})\\b",
              "name": "constant.character.escape strong"
            },
            {
              "match": "\\b(5[0-9]{2}|[1-4][0-9]{3})\\b",
              "name": "constant.character.escape"
            },
            {
              "match": "\\b(1[0-9]{2}|[2-4][0-9]{2}|500)\\b",
              "name": "comment"
            },
            {
              "match": "\\b(100|[1-9]?[0-9])\\b",
              "name": "comment strong"
            }
          ]
        }
      }
    },
    {
      "match": "\\b(at|code|dyno|connect|service)=([^\\s]+)",
      "captures": {
        "1": {
          "name": "support.type.property-name"
        },
        "2": {
          "name": "string"
        }
      }
    },
    {
      "match": "\\b(Stopping all processes with SIGTERM)\\b",
      "name": "constant.character.set.regexp"
    },
    {
      "match": "\\b(Starting process with command )(`.*?`)",
      "captures": {
        "2": {
          "name": "constant.character strong"
        }
      }
    },
    {
      "match": "\\b(Process exited with status )(\\d+)\\b",
      "captures": {
        "2": {
          "patterns": [
            {
              "include": "#exit-status"
            },
            {
              "match": "[1-9]+",
              "name": "constant.character.set.regexp"
            }
          ]
        }
      }
    },
    {
      "match": "\\b(Unidling|Restarting)\\b",
      "name": "keyword"
    },
    {
      "match": "\\b(\\d+\\.\\d+\\.\\d+\\.\\d+) -[^-]*- \\[[^\\]]+\\] \"(\\w+) ([^ ]+) HTTP/\\d+\\.\\d+\" (\\d+)",
      "captures": {
        "1": {
          "name": "constant.numeric"
        },
        "2": {
          "name": "keyword"
        },
        "3": {
          "name": "string"
        },
        "4": {
          "name": "constant.numeric"
        }
      }
    },
    {
      "match": "\\b(Build succeeded|Build failed)\\b",
      "name": "keyword"
    },
    {
      "match": "\\b(Build started by user )(.+)\\b",
      "captures": {
        "1": {
          "name": "keyword"
        },
        "2": {
          "name": "entity.name.tag"
        }
      }
    },
    {
      "match": "\\b(Deploy )(\\w+)( by user )(.+)\\b",
      "captures": {
        "1": {
          "name": "keyword"
        },
        "2": {
          "name": "constant.language"
        },
        "3": {
          "name": "keyword"
        },
        "4": {
          "name": "entity.name.tag"
        }
      }
    },
    {
      "match": "\\b(Release )(v[\\d]+)( created by user )(.+)\\b",
      "captures": {
        "1": {
          "name": "keyword"
        },
        "2": {
          "name": "constant.numeric"
        },
        "3": {
          "name": "keyword"
        },
        "4": {
          "name": "entity.name.tag"
        }
      }
    },
    {
      "match": "\\b(\\[DATABASE\\].*)?(CREATE TABLE)(.*)\\b",
      "captures": {
        "1": {
          "name": "keyword"
        },
        "2": {
          "name": "keyword.control"
        },
        "3": {
          "name": "entity.name.tag"
        }
      }
    },
    {
      "match": "\\b(Trace)\\b:|(?i)\\[(verbose|verb|vrb|vb|v)\\]|(?<=^[\\s\\d\\p]*)\\bV\\b",
      "name": "comment"
    },
    {
      "match": "\\b(DEBUG|Debug)\\b|(?i)\\b(debug)\\:|(?i)\\[(debug|dbug|dbg|de|d)\\]|(?<=^[\\s\\d\\p]*)\\bD\\b",
      "name": "markup.changed"
    },
    {
      "match": "\\b(HINT|INFO|INFORMATION|Info|NOTICE|II)\\b|(?i)\\b(info|information)\\:|(?i)\\[(information|info|inf|in|i)\\]|(?<=^[\\s\\d\\p]*)\\bI\\b",
      "name": "markup.inserted"
    },
    {
      "match": "\\b(WARNING|WARN|Warn|WW)\\b|(?i)\\b(warning)\\:|(?i)\\[(warning|warn|wrn|wn|w)\\]|(?<=^[\\s\\d\\p]*)\\bW\\b",
      "name": "markup.deleted"
    },
    {
      "match": "\\b(ALERT|CRITICAL|EMERGENCY|ERROR|FAILURE|FAIL|Fatal|FATAL|Error|EE)\\b|(?i)\\b(error)\\:|(?i)\\[(error|eror|err|er|e|fatal|fatl|ftl|fa|f)\\]|(?<=^[\\s\\d\\p]*)\\bE\\b",
      "name": "invalid"
    },
    {
      "match": "\\b\\d{4}-\\d{2}-\\d{2}(T|\\b)",
      "name": "comment"
    },
    {
      "match": "(?<=(^|\\s))\\d{2}[^\\w\\s]\\d{2}[^\\w\\s]\\d{4}\\b",
      "name": "comment"
    },
    {
      "match": "\\d{1,2}:\\d{2}(:\\d{2}([.,]\\d{1,})?)?(Z| ?[+-]\\d{1,2}:\\d{2})?\\b",
      "name": "comment"
    },
    {
      "match": "\\b([0-9a-fA-F]{40}|[0-9a-fA-F]{10}|[0-9a-fA-F]{7})\\b",
      "name": "constant.language"
    },
    {
      "match": "\\b[0-9a-fA-F]{8}[-]?([0-9a-fA-F]{4}[-]?){3}[0-9a-fA-F]{12}\\b",
      "name": "constant.language"
    },
    {
      "match": "\\b([0-9a-fA-F]{2,}[:-])+[0-9a-fA-F]{2,}+\\b",
      "name": "constant.language"
    },
    {
      "match": "\\b([0-9]+|true|false|null)\\b",
      "name": "constant.language"
    },
    {
      "match": "\\b(0x[a-fA-F0-9]+)\\b",
      "name": "constant.numeric"
    },
    {
      "match": "\"[^\"]*\"",
      "name": "string"
    },
    {
      "match": "(?<![\\w])'[^']*'",
      "name": "string"
    },
    {
      "match": "\\b([a-zA-Z.]*Exception)\\b",
      "name": "invalid"
    },
    {
      "begin": "^[\\t ]*at[\\t ]",
      "end": "$",
      "name": "markup.changed"
    },
    {
      "match": "\\b[a-z]+://\\S+\\b/?",
      "name": "constant.language"
    },
    {
      "match": "(?<![\\w/\\\\])([\\w-]+\\.)+([\\w-])+(?![\\w/\\\\])",
      "name": "constant.language"
    },
    {
      "match": "^(.*?\\[([\\w-]+)([\\d.]+)?\\]:)(.*)$",
      "captures": {
        "1": {
          "name": "entity.name.tag"
        },
        "2": {
          "name": "entity.name.tag"
        },
        "3": {
          "name": "constant.numeric"
        },
        "4": {
          "name": "string"
        }
      }
    }
  ]
}
